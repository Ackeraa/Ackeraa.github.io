<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Aho-Corasick Automata</title>
    <url>/2022/07/04/ac-automata/</url>
    <content><![CDATA[<blockquote>
<p>本文参考自斯坦福大学数据结构课程 <a href="http://web.stanford.edu/class/archive/cs/cs166/cs166.1166/">CS166</a> 的 <a href="http://web.stanford.edu/class/archive/cs/cs166/cs166.1166/lectures/02/Slides02.pdf">Aho-Corasick Automata</a></p>
</blockquote>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><blockquote>
<p>给定一个字符串 $T$，找出 $k$ 个非空字符串 $P_1, P_2, …, P_k$ 在 $T$ 中出现的所有位置。</p>
</blockquote>
<p>为了方便描述，作如下符号定义：</p>
<ul>
<li>$T$：文本串</li>
<li>$P_i$：模式串</li>
<li>$m=|T|$：文本串的长度</li>
<li>$k$：模式串的个数</li>
<li>$n=|P_1|+|P_2|+ … + |P_k|$：所有模式串的总长度</li>
<li>$L_{max}$：最长的模式串</li>
<li>$\Sigma$：构成所有字符串的字母表</li>
</ul>
<p>暴力的解法是首先枚举文本串 $T$ 的每个位置，然后枚举每个模式串 $P_i$ ，判断 $P_i$ 是否在该位置出现，算法的时间复杂度为： $O(mn)$。</p>
<p>下文主要介绍两种优化算法，字典树（$Trie$） 和 AC自动机（$AC-Automata$） ，</p>
<h1 id="字典树"><a href="#字典树" class="headerlink" title="字典树"></a>字典树</h1><p>字典树的主要优势是可以利用公共前缀减少查询时间，首先将所有的模式串构造成一棵字典树，具体过程如下图所示（为了画图方便，本文所有图中都将字符画到了结点上而不是边上）：</p>
<img src="/2022/07/04/ac-automata/trie_build.gif" class="">

<p>构造时只需遍历所有的模式串，时间复杂度为：$O(n)$。</p>
<p>然后进行匹配，首先枚举 $T$ 的每一个位置，然后在字典树中查询，过程如下图：</p>
<img src="/2022/07/04/ac-automata/trie_query.gif" class="">

<p>匹配时只会访问字典树的一条链，时间复杂度为：$O(mL_{max})$。</p>
<p>沿用之前的表示方式：$p(m, n)$表示算法的预处理时间复杂度， $q(m, n)$：表示匹配的时间复杂度，该算法的时间复杂度表示为$&lt;O(n), O(mL_{max})&gt;$，具体代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, pattern=None</span>):</span></span><br><span class="line">        self.children = defaultdict(TrieNode)</span><br><span class="line">        self.pattern = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, patterns</span>):</span></span><br><span class="line">        self.patterns = patterns</span><br><span class="line">        self.root = TrieNode()</span><br><span class="line">        self.build()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> pattern <span class="keyword">in</span> self.patterns:</span><br><span class="line">            u = self.root</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> pattern:</span><br><span class="line">                u = u.children[c]</span><br><span class="line">            u.pattern = pattern</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">match</span>(<span class="params">self, text</span>):</span></span><br><span class="line">        m = len(text)</span><br><span class="line">        answer = defaultdict(list)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">            u = self.root</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i, m):</span><br><span class="line">                u = u.children.get(text[j])</span><br><span class="line">                <span class="keyword">if</span> u <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> u.pattern <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                    answer[u.pattern].append(i)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> answer</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    patterns = [<span class="string">&quot;ab&quot;</span>, <span class="string">&quot;about&quot;</span>, <span class="string">&quot;at&quot;</span>, <span class="string">&quot;ate&quot;</span>, <span class="string">&quot;be&quot;</span>, <span class="string">&quot;bed&quot;</span>, <span class="string">&quot;edge&quot;</span>, <span class="string">&quot;get&quot;</span>]</span><br><span class="line">    text = <span class="string">&quot;abedget&quot;</span></span><br><span class="line">    trie = Trie(patterns)</span><br><span class="line">    print(trie.match(text))</span><br></pre></td></tr></table></figure>

<h1 id="AC自动机"><a href="#AC自动机" class="headerlink" title="AC自动机"></a>AC自动机</h1><p>AC自动机以字典树为结构基础，通过引入失配指针（Suffix Links）和输出指针（Output Links），来保存上下文信息，降低匹配的时间复杂度。</p>
<p>失配指针：</p>
<ul>
<li>用于在匹配字符串失败时进行回退</li>
<li>除根结点外，每个结点都有一个失配指针</li>
<li>结点的失配指针指向它的最长后缀</li>
<li>下文用红色边代表适配指针</li>
</ul>
<p>如下图：</p>
<img src="/2022/07/04/ac-automata/ac_suffix_1.png" class="">

<p>设当前匹配起点为 $i$，匹配到位置 $j$ ，无法再继续匹配，即 $T[i..j+1]$ 不在字典树中，也就是说以 $i$ 为起点无法再匹配到模式串，这时候通过失配指针跳转到新的起点，继续匹配，具体过程如下图所示。</p>
<img src="/2022/07/04/ac-automata/ac_suffix_2.gif" class="">

<p>可见，对于每一步：要么移动指针 $j$，要么移动指针 $i$，每个指针都最多移动 $O(m)$ 步，因此将时间复杂度从 $O(mL_{max})$ 降低到 $O(m)$。</p>
<p>但是，该做法还存在一个问题，由于不再从文本串 $T$ 的每一个位置开始匹配，会导致遗漏，如下图只匹配到了<em>sting</em>，漏掉了<em>i, in, tin</em>。</p>
<img src="/2022/07/04/ac-automata/ac_suffix_3.gif" class="">

<p>在匹配的过程中，会有一些模式串是当前字符串的后缀，输出指针用来指向这些模式串，通过输出指针链将其正确输出。</p>
<img src="/2022/07/04/ac-automata/ac_suffix_4.gif" class="">

<h2 id="构造失配指针"><a href="#构造失配指针" class="headerlink" title="构造失配指针"></a>构造失配指针</h2><p>假设Trie上结点 $w$ 的失配指针指向结点 $x$，$w$ 有一子结点为 $wa$，则存在两种情况：</p>
<ul>
<li><p>$xa$ 存在</p>
<img src="/2022/07/04/ac-automata/ac_suffix_5.png" class="">
</li>
<li><p>$xa$ 不存在</p>
</li>
</ul>
<p>​        <img src="/2022/07/04/ac-automata/ac_suffix_6.png" class=""></p>
<p>通过对trie进行广度优先搜索来构造 $wa$ 的失配指针：</p>
<ul>
<li><p>如果当前节点为根结点，则它没有失配指针</p>
</li>
<li><p>如果当前节点为根结点的子结点，则它的失配指针指向根结点</p>
</li>
<li><p>否则，设该结点为 $wa$，$x$ 为 $w$ 的失配指针指向的结点：</p>
<ul>
<li><p>如果 $xa$ 存在，则将 $wa$ 的失配指针指向 $xa$</p>
</li>
<li><p>否则，如果x是根结点，将 $wa$ 的失配指针指向根结点</p>
</li>
<li><p>否则，将 $x$ 设为 $x$ 的失配指针所指的结点，并重复上述步骤</p>
</li>
</ul>
</li>
</ul>
<h2 id="构造输出指针"><a href="#构造输出指针" class="headerlink" title="构造输出指针"></a>构造输出指针</h2><p>具体算法如下：</p>
<ul>
<li>首先将所有结点的输出指针设为<code>null</code></li>
<li>当在进行广度优先搜索构造失配指针的同时，按如下方式构造当前结点 $v$ 的输出指针：<ul>
<li>设 $u$ 为 $v$ 的失配指针指向的结点</li>
<li>如果 $u$ 对应一个模式串，则 $v$ 的输出指针指向 $u$</li>
<li>否则，将 $v$ 的输出指针指向 $u$ 的输出指针指向的结点</li>
</ul>
</li>
</ul>
<p>最终的算法流程如下：</p>
<ul>
<li>从Trie的根结点开始</li>
<li>对于 $T$ 中的每一个字符 $c$：<ul>
<li>如果当前节点的子结点没有 $c$:<ul>
<li>如果当前位于根结点，结束当前循环</li>
<li>否则，移动到失配指针指向的结点</li>
</ul>
</li>
<li>如果当前结点的子结点有 $c$，移动到该结点</li>
<li>如果当前结点对应一个模式串，输出该模式串</li>
<li>输出当前节点的输出指针链上的所有模式串</li>
</ul>
</li>
</ul>
<p>具体代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, pattern=None</span>):</span></span><br><span class="line">        self.children = defaultdict(TrieNode)</span><br><span class="line">        self.pattern = <span class="literal">None</span></span><br><span class="line">        self.suffix_link = <span class="literal">None</span></span><br><span class="line">        self.output_link = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ACAutomata</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, patterns</span>):</span></span><br><span class="line">        self.patterns = patterns</span><br><span class="line">        self.root = TrieNode()</span><br><span class="line">        self.build()</span><br><span class="line">        self.bfs()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> pattern <span class="keyword">in</span> self.patterns:</span><br><span class="line">            u = self.root</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> pattern:</span><br><span class="line">                u = u.children[c]</span><br><span class="line">            u.pattern = pattern</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bfs</span>(<span class="params">self</span>):</span></span><br><span class="line">        q = queue.Queue()</span><br><span class="line">        q.put(self.root)</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">            u = q.get()</span><br><span class="line">            <span class="comment"># Build suffix link.</span></span><br><span class="line">            <span class="keyword">for</span> a, v <span class="keyword">in</span> u.children.items():</span><br><span class="line">                <span class="keyword">if</span> u == self.root:</span><br><span class="line">                    v.suffix_link = u</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    x = u.suffix_link</span><br><span class="line">                    <span class="keyword">while</span> v.suffix_link <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                        <span class="keyword">if</span> a <span class="keyword">in</span> x.children.keys():</span><br><span class="line">                            v.suffix_link = x.children[a]</span><br><span class="line">                        <span class="keyword">elif</span> x == self.root:</span><br><span class="line">                            v.suffix_link = x</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            x = x.suffix_link</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Build output link.</span></span><br><span class="line">                <span class="keyword">if</span> v.suffix_link.pattern <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                    v.output_link = v.suffix_link</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    v.output_link = v.suffix_link.output_link</span><br><span class="line"></span><br><span class="line">                q.put(v)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">match</span>(<span class="params">self, text</span>):</span></span><br><span class="line">        u = self.root</span><br><span class="line">        answer = defaultdict(list)</span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> text:</span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">not</span> c <span class="keyword">in</span> u.children.keys():</span><br><span class="line">                u = u.suffix_link</span><br><span class="line">                <span class="keyword">if</span> u == self.root <span class="keyword">or</span> u <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> u <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">in</span> u.children.keys():</span><br><span class="line">                u = u.children[c]</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            v = u</span><br><span class="line">            <span class="keyword">while</span> v <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">if</span> v.pattern <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                    answer[v.pattern].append(j - len(v.pattern))</span><br><span class="line">                v = v.output_link</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> answer</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    patterns = [<span class="string">&quot;ab&quot;</span>, <span class="string">&quot;about&quot;</span>, <span class="string">&quot;at&quot;</span>, <span class="string">&quot;ate&quot;</span>, <span class="string">&quot;be&quot;</span>, <span class="string">&quot;bed&quot;</span>, <span class="string">&quot;edge&quot;</span>, <span class="string">&quot;get&quot;</span>]</span><br><span class="line">    text = <span class="string">&quot;abedget&quot;</span></span><br><span class="line">    ac_automata = ACAutomata(patterns)</span><br><span class="line">    print(ac_automata.match(text))</span><br></pre></td></tr></table></figure>

<p><strong><a href="https://github.com/Ackeraa/DataStructure/tree/master/AC-Automata">下载</a>代码.</strong></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Range Minimum Queries(Part Two)</title>
    <url>/2021/01/29/rmq2/</url>
    <content><![CDATA[<blockquote>
<p>本文参考自斯坦福大学数据结构课程 <a href="http://web.stanford.edu/class/archive/cs/cs166/cs166.1166/">CS166</a> 的 <a href="http://web.stanford.edu/class/archive/cs/cs166/cs166.1166/lectures/01/Slides01.pdf">Range Minimum Queries, Part Two</a></p>
</blockquote>
<h1 id="问题回顾"><a href="#问题回顾" class="headerlink" title="问题回顾"></a>问题回顾</h1><p>在 <a href="/2020/10/29/rmq/" title="Part One">Part One</a>中，基于分块算法，建立了这样一个算法框架：</p>
<ul>
<li>块间采用时间复杂度为 $&lt;p_1(n),q_1(n)&gt;$ 的 $RMQ$ 算法</li>
<li>块内采用时间复杂度为 $&lt;p_2(n),q_2(n)&gt;$ 的 $RMQ$ 算法</li>
<li>块的大小为 $b$</li>
<li>预处理的时间复杂度为 ：$O(n+p_1(n/b)+(n/b)\cdot p_2(b))$</li>
<li>查询的时间复杂度为：$O(q_1(n/b)+q_2(b))$</li>
</ul>
<p>得到的三个组合中，时间复杂度最优能做到 $&lt;O(n\cdot log(log(n))), O(1)&gt;$，或者 $&lt;O(n), O(log(log(n)))&gt;$。</p>
<p>考虑在这样一个框架下如何设计出 $&lt;O(n), O(1)&gt;$ 的算法。</p>
<p>分析预处理和查询的时间复杂度公式可知：当 $p_2(b)=O(b)$，$q_2(b)=O(1)$ 时才有可能满足，即如果块内 $RMQ$ 算法的时间复杂度可以做到 $&lt;O(n), O(1)&gt;$ ，就可能得到一个时间复杂度为 $&lt;O(n), O(1)&gt;$ 的 $RMQ$ 算法。</p>
<p>下文主要讨论如何将块内 $RMQ$ 算法的时间复杂度降到 $&lt;O(n), O(1)&gt;$。</p>
<h1 id="一些讨论"><a href="#一些讨论" class="headerlink" title="一些讨论"></a>一些讨论</h1><p>首先作如下定义：</p>
<ul>
<li>$B_1, B_2$ ：长度为 $b$ 的块</li>
<li>$RMQ_B(i, j)$ ：块B区间 $[i, j]$ 的最小值下标</li>
<li>$B_1\sim B_2$ ：对于任意的 $0\le i\le j &lt; b, RMQ_{B_1}(i,j)=RMQ_{B_2}(i,j)$，称之为相似</li>
</ul>
<p>对于块内 $RMQ$，可以充分利用的优势是其区间长度固定为一个不大的常数 $b$，对于一个极大的区间$n$，存在很多相似的块，对于相似的块，只进行一次 $RMQ_A$ 预处理即可。</p>
<p>例如，如下两块即为相似：</p>
<img src="/2021/01/29/rmq2/Fig1.gif" class="">


<p>难点在于找出相似的块，最简单的想法是看其排列是否相同，即按照大小关系，将块内的数转换为正整数区间$[1,b]$ 内的整数，如下图：</p>
<img src="/2021/01/29/rmq2/Fig2.gif" class="">

<p>初步猜想如果 $B_1, B_2$ 排列相同，那么 $B_1 \sim B_2$。</p>
<p>但这种做法存在两个问题：</p>
<ul>
<li><p>存在  $B_1, B_2$ 排列不同，但  $B_1 \sim B_2$ 的情况，即这种方法无法找出所有相似的块，如下图：</p>
<img src="/2021/01/29/rmq2/Fig3.gif" class="">



</li>
</ul>
<ul>
<li>一个块的排列个数有 $b!$ 个，即对于特殊构造的序列（每一块的排列都不相同），依然需要对每一块进行一次 $RMQ$ 预处理</li>
</ul>
<p>所以，需要一种更好的判断标准。上述猜想考虑的是什么样的块是相似的，可以反过来考虑，即相似的块具有什么性质。</p>
<p>发现，如果 $B_1 \sim B_2$，那么 $B_1, B_2$ 的最小值必然出现在各自相同的位置（即下标相同），该性质在最小值左右两边的子区间内递归满足，引出笛卡尔树。</p>
<h1 id="笛卡尔树"><a href="#笛卡尔树" class="headerlink" title="笛卡尔树"></a>笛卡尔树</h1><p>笛卡尔树是从数组转化而来的二叉树，定义如下：</p>
<ul>
<li>空数组构成一棵空的笛卡尔树</li>
<li>对于非空数组，根结点保存区间最小值的下标，左右孩子是其左右两边子区间构成的笛卡尔树</li>
</ul>
<p>如下图：</p>
<img src="/2021/01/29/rmq2/Fig4.gif" class="">

<p>笛卡尔树的中序遍历即可得到原数组。</p>
<p>有如下定理：</p>
<blockquote>
<p>$B_1, B_2$ 是长度为 $b$ 的块，$B_1 \sim B_2$ 当且仅当 $B_1, B_2$ 构成的笛卡尔树相同。</p>
</blockquote>
<p>如果可以构建出所有块的笛卡尔树，就可以判断出哪些块是相似的。</p>
<p>一个简单粗暴的构建方法如下：</p>
<ul>
<li>遍历数组寻找最小值</li>
<li>递归构建最小值左边子区间的笛卡尔树</li>
<li>递归构建最小值右边子区间的笛卡尔树</li>
</ul>
<p>但其效率取决于数组特征：</p>
<ul>
<li><p>如果每次都能在最优位置（区间中间）划分，时间复杂度为：$O(nlog(n))$，如下图：</p>
<img src="/2021/01/29/rmq2/Fig5.gif" class="">
</li>
<li><p>如果每次都在最坏位置（区间首部或尾部）划分，其时间复杂度退化为：$O(n^2)$，如下图：</p>
<img src="/2021/01/29/rmq2/Fig6.gif" class="">

</li>
</ul>
<p>具体代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CartesianTreeNode</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, index</span>):</span></span><br><span class="line">        self.index = index</span><br><span class="line">        self.lchild = <span class="literal">None</span></span><br><span class="line">        self.rchild = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CartesianTree</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, a</span>):</span></span><br><span class="line">        self.a = a</span><br><span class="line">        self.root = self.build(<span class="number">0</span>, len(a))</span><br><span class="line">        self.traverse(self.root)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span>(<span class="params">self, l, r</span>):</span></span><br><span class="line">        <span class="keyword">if</span> l == r:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        index = self.a[l:r].index(min(self.a[l:r])) + l</span><br><span class="line">        node = CartesianTreeNode(index)</span><br><span class="line">        node.lchild = self.build(l, index)</span><br><span class="line">        node.rchild = self.build(index + <span class="number">1</span>, r)</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">traverse</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        <span class="keyword">if</span> node.lchild <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.traverse(node.lchild)</span><br><span class="line">        print(node.index)</span><br><span class="line">        <span class="keyword">if</span> node.rchild <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.traverse(node.rchild)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    a = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">4</span>]</span><br><span class="line">    cartesian_tree = CartesianTree(a)</span><br></pre></td></tr></table></figure>

<p>一种更高效的方法是线性增加节点，即先构建数组第一个数的笛卡尔树，在此基础上增加第二个数，并调整笛卡尔树，然后再增加第三个数，以此类推。</p>
<p>考虑以下几点性质：</p>
<ul>
<li>对于一个新增加的节点，它不可能成为任何节点的左孩子，只能是新的根结点，或者某节点的右孩子</li>
<li>根据上一个性质，每次新节点的增加，并不会改变任何已有节点的左子树，只会更改其的父节点或右子树</li>
<li>笛卡尔树满足小根堆的性质，即根节点的值小于左右孩子</li>
</ul>
<p>据此，便可以提出一个基于栈的算法来构建笛卡尔树，在加入一个新节点时：</p>
<font color=#37A59A>

<ol>
<li>当栈顶节点值大于新节点值时执行出栈操作，直至栈顶节点值小于新节点值或栈空</li>
<li>把新节点的左孩子置为最后一个出栈的节点（如果没有节点出栈，置空）</li>
<li>把新节点置为栈顶节点的右孩子（如果栈空，新节点成为根节点）</li>
<li>将新节点入栈</li>
</ol>
</font>

<p>对该算法的正确性进行一些解释。对于一个递增的序列，只会执行 3、4，即不断的向右增加节点且入栈，正确性显然，栈始终保留一个递增的节点序列，如下图：</p>
<img src="/2021/01/29/rmq2/Fig7.gif" class="">

<p>如果此时加入的新节点比栈顶节点（即上次加入的节点）值小，意味着栈顶节点要成为新节点的左子树部分，需要找到合适的位置来插入新节点，所以执行出栈操作，直到栈顶节点值小于新节点值或栈空为止，然后将新节点左孩子置为最后一个出栈的节点（也即所有出栈节点的祖先节点），并将新节点置为当前栈顶节点的右孩子（如果栈空，意味着新节点是当前最小节点，直接作为根结点），最后新节点入栈，栈依旧保留一个递增的节点序列。具体流程如下图：</p>
<img src="/2021/01/29/rmq2/Fig8.gif" class="">

<p>在该算法中，栈的作用是保留一个后续可能会变动的节点序列，在步骤1中，之所以将节点出栈，是因为这些节点会在步骤2中成为新节点的左子树部分，在之后的操作中，不会再变动。</p>
<p>算法围绕栈来操作，栈操作最多 $2n$ 次：</p>
<ul>
<li>每个节点都入栈1次</li>
<li>每个节点最多出栈1次</li>
</ul>
<p>其时间复杂度为：$O(n)$。</p>
<p>具体代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CartesianTreeNode</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, index</span>):</span></span><br><span class="line">        self.index = index</span><br><span class="line">        self.lchild = <span class="literal">None</span></span><br><span class="line">        self.rchild = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CartesianTree</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, a</span>):</span></span><br><span class="line">        self.root = <span class="literal">None</span></span><br><span class="line">        self.build(a)</span><br><span class="line">        self.traverse(self.root)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span>(<span class="params">self, a</span>):</span></span><br><span class="line">        stack = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)):</span><br><span class="line">            new_node = CartesianTreeNode(i)</span><br><span class="line">            last_poped_node = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">while</span> len(stack) &gt; <span class="number">0</span> <span class="keyword">and</span> a[stack[<span class="number">-1</span>].index] &gt; a[i]:</span><br><span class="line">                last_poped_node = stack.pop()</span><br><span class="line">            new_node.lchild = last_poped_node</span><br><span class="line">            <span class="keyword">if</span> len(stack) &gt; <span class="number">0</span>:</span><br><span class="line">                stack[<span class="number">-1</span>].rchild = new_node</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.root = new_node</span><br><span class="line">            stack.append(new_node)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">traverse</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        <span class="keyword">if</span> node.lchild <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.traverse(node.lchild)</span><br><span class="line">        print(node.index)</span><br><span class="line">        <span class="keyword">if</span> node.rchild <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.traverse(node.rchild)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    a = [<span class="number">27</span>, <span class="number">18</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">28</span>, <span class="number">45</span>, <span class="number">90</span>, <span class="number">45</span>, <span class="number">23</span>, <span class="number">53</span>, <span class="number">60</span>, <span class="number">28</span>, <span class="number">74</span>, <span class="number">71</span>, <span class="number">35</span>]  </span><br><span class="line">    cartesian_tree = CartesianTree(a)</span><br></pre></td></tr></table></figure>



<h1 id="Fischer-Heun-算法"><a href="#Fischer-Heun-算法" class="headerlink" title="Fischer-Heun 算法"></a>Fischer-Heun 算法</h1><p>回顾目标：选择一个合适的块大小 $b$，使得：</p>
<ul>
<li>有足够多的块相似，以便重复利用 $RMQ_A$ 结构</li>
<li>块间 $RMQ$ 算法足够快</li>
</ul>
<p>可以根据块的笛卡尔树是否相同来判断它们是否相似，但在预处理完某个块的 $RMQ_A$ 之后，很难以其笛卡尔树为键值进行保存，需要寻找其它的特征。</p>
<p>不难发现，上述基于栈的算法生成的笛卡尔树由其出栈、入栈序列唯一确定，因此可以使用长度为2b的二进制数来代表笛卡尔树，1表示入栈，0表示出栈，称之为笛卡尔树生成数，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CartesianTreeNumber</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, a</span>):</span></span><br><span class="line">        self.num = self.build(a)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span>(<span class="params">self, a</span>):</span></span><br><span class="line">        stack = []</span><br><span class="line">        nums = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)):</span><br><span class="line">            <span class="keyword">while</span> len(stack) &gt; <span class="number">0</span> <span class="keyword">and</span> a[stack[<span class="number">-1</span>]] &gt; a[i]:</span><br><span class="line">                stack.pop()</span><br><span class="line">                nums.append(<span class="number">0</span>)</span><br><span class="line">            stack.append(i)</span><br><span class="line">            nums.append(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">while</span> len(stack) &gt; <span class="number">0</span>:</span><br><span class="line">            stack.pop()</span><br><span class="line">            nums.append(<span class="number">0</span>)</span><br><span class="line">        num = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> nums:</span><br><span class="line">            num = num * <span class="number">2</span> + x</span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    a = [<span class="number">27</span>, <span class="number">18</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">28</span>, <span class="number">45</span>, <span class="number">90</span>, <span class="number">45</span>, <span class="number">23</span>, <span class="number">53</span>, <span class="number">60</span>, <span class="number">28</span>, <span class="number">74</span>, <span class="number">71</span>, <span class="number">35</span>]  </span><br><span class="line">    cartesian_tree_number = CartesianTreeNumber(a)</span><br><span class="line">    print(cartesian_tree_number.num)</span><br></pre></td></tr></table></figure>

<p>至多有 $2^{2b}=4^b$ 个二进制数，故至多有 $4^b$ 个笛卡尔树。</p>
<p>至此，便可讨论最终的Fischer-Heun 算法，其思想为：块间采用稀疏表结构，块内采用动态规划，但作如下修改：</p>
<ul>
<li>动态规划不再保存最小值，而是保存最小值下标</li>
<li>定义一个长度为 $4^b$ 的数组 $hash$，$hash[t]$ 存储指向笛卡尔树生成数为 $t$ 的块的指针</li>
<li>当计算某个块内最小值时，首先计算其笛卡尔树生成数 $t$，若 $hash$ 数组中存在，则直接查询使用，对该块用动态规划进行预处理，计算$t$，并将 $hash[t]$ 指向预处理后的 $RMQ$ 结构</li>
</ul>
<p>其预处理时间复杂度为：</p>
<ul>
<li>计算每个块的最小值：$O(n)$</li>
<li>建立稀疏表：$O(n/b\cdot log(n))$</li>
<li>动态规划预处理最多 $4^b$个块内 $RMQ$，每个块耗费 $O(b^2)$：$O(4^b\cdot b^2)$</li>
<li>总时间复杂度为：$O(n + n/b\cdot log(n) + 4^b\cdot b^2)$</li>
</ul>
<p>令 $b=log_4(n^{1/2})$：<br>$$<br>\begin{eqnarray*}<br>n/b\cdot log(n)=O(n)\\<br>4^b\cdot b^2=n^{1/2}\cdot (log(n))^2=O(n)\\<br>O(n + n/b\cdot log(n) + 4^b\cdot b^2)=O(n)<br>\end{eqnarray*}<br>$$<br>查询的时间复杂度为：$O(1)$</p>
<p>最终得到了一个 $&lt;O(n), O(1)&gt;$的算法，具体代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt, log, inf</span><br><span class="line"><span class="keyword">from</span> cartesian_stack <span class="keyword">import</span> CartesianTreeNumber</span><br><span class="line"><span class="keyword">from</span> st <span class="keyword">import</span> St</span><br><span class="line"><span class="keyword">from</span> dp2 <span class="keyword">import</span> Dp</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Combine4</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, a</span>):</span></span><br><span class="line">        self.a = a</span><br><span class="line">        self.n = len(a)</span><br><span class="line">        self.len_b = max(<span class="number">1</span>, int(log(sqrt(self.n))/log(<span class="number">4</span>)))</span><br><span class="line">        self.hash = [<span class="number">-1</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">4</span> ** self.len_b)]</span><br><span class="line">        self.cnt_b = (self.n - <span class="number">1</span>) // self.len_b + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preprocess</span>(<span class="params">self</span>):</span></span><br><span class="line">        f = [inf <span class="keyword">for</span> _ <span class="keyword">in</span> range(self.cnt_b)] </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.cnt_b):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i * self.len_b, i * self.len_b + self.len_b):</span><br><span class="line">                <span class="keyword">if</span> j &gt;= self.n:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                f[i] = min(f[i], self.a[j])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># ST between blocks.</span></span><br><span class="line">        self.st = St(f)</span><br><span class="line">        self.st.preprocess()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rmq</span>(<span class="params">self, i, j</span>):</span></span><br><span class="line">        ans = inf</span><br><span class="line">        ith = i // self.len_b </span><br><span class="line">        jth = j // self.len_b</span><br><span class="line"></span><br><span class="line">        i -= ith * self.len_b</span><br><span class="line">        j -= jth * self.len_b</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">find_or_set</span>(<span class="params">ith, i, j</span>):</span></span><br><span class="line">            a = self.a[ith * self.len_b:(ith + <span class="number">1</span>) * self.len_b]</span><br><span class="line">            t = CartesianTreeNumber(a).num</span><br><span class="line">            <span class="keyword">if</span> self.hash[t] == <span class="number">-1</span>:</span><br><span class="line">                dp = Dp(a)</span><br><span class="line">                dp.preprocess()</span><br><span class="line">                self.hash[t] = dp</span><br><span class="line">            <span class="keyword">return</span> a[self.hash[t].rmq(i, j)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ith == jth:</span><br><span class="line">            ans = min(ans, find_or_set(ith, i, j))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ans = min(ans, find_or_set(ith, i, self.len_b - <span class="number">1</span>)) </span><br><span class="line">            ans = min(ans, find_or_set(jth, <span class="number">0</span>, j)) </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ith + <span class="number">1</span> &lt;= jth - <span class="number">1</span>:</span><br><span class="line">            ans = min(ans, self.st.rmq(ith + <span class="number">1</span>, jth - <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>: </span><br><span class="line">    a = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">4</span>]</span><br><span class="line">    combine4 = Combine4(a)</span><br><span class="line">    combine4.preprocess()</span><br><span class="line">    print(combine4.rmq(<span class="number">1</span>, <span class="number">13</span>))</span><br></pre></td></tr></table></figure>

<p>由于该算法的常数较大，在实际应用中，组合1的效率更高一点。</p>
<p><strong><a href="https://github.com/Ackeraa/DataStructure/tree/master/RMQ">下载</a>代码.</strong></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Range Minimum Queries(Part One)</title>
    <url>/2020/10/29/rmq/</url>
    <content><![CDATA[<blockquote>
<p>本文参考自斯坦福大学数据结构课程 <a href="http://web.stanford.edu/class/archive/cs/cs166/cs166.1166/">CS166</a> 的 <a href="http://web.stanford.edu/class/archive/cs/cs166/cs166.1166/lectures/00/Slides00.pdf">Range Minimum Queries, Part One</a></p>
</blockquote>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><blockquote>
<p>给定长度为 $n$ 的数组A，以及两个下标 $i,j(i\le j) $, 求出 $ A[i], A[i + 1], … , A[j]$ 的最小值。</p>
</blockquote>
<p>最简单的方法是直接枚举 $i,j$ 之间的元素，取出最小的即可，时间复杂度为$O(n)$，问题的难点在如何求出所有合法区间的最小值。</p>
<p>对于一个长度为 $n$ 的数组，最多存在 $1+2+3+…+n=n(n+1)/2$ 即 $O(n^2)$ 个合法询问，若采用上述解法:</p>
<ul>
<li>询问个数：$O(n^2)$ </li>
<li>每次询问花费的时间：$O(n)$</li>
<li>总时间复杂度：$O(n^3)$</li>
</ul>
<p>下文讨论一些优化算法，为了方便，记 $RMQ(i, j)$ 为区间 $[i, j]$ 的最小值；记某个 $RMQ$ 算法的时间复杂度为：$&lt;p(n), q(n)&gt;$ ，其中：</p>
<ul>
<li>$p(n)$ 表示预处理的时间复杂度</li>
<li>$q(n)$ 表示查询的时间复杂度</li>
</ul>
<p>那么上述枚举算法的时间复杂度则可记为：$&lt;O(1), O(n)&gt;$。</p>
<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><p>可以采用动态规划在 $O(n^2)$ 的时间内预处理出所有的合法询问，之后便可以在 $O(1)$ 时间内查询，其时间复杂度记为：$&lt;O(n^2), O(1)&gt;$。</p>
<p>具体算法为：依次求出长度为 $1, 2,…, n$ 的所有区间的最小值，在求长度为 $k(1&lt;k\le n)$的区间: $[i, j] (j-i+1=k)$ 时，可利用两个长度为 $k-1$ 的区间 $ [i, j-1] $ 和  $[i+1, j]$ 直接比较求出，其状态转移方程为：<br>$$<br>f[i][j]=min(f[i][j-1],f[i+1][j])<br>$$<br>状态初始化为：$f[i][i]=a[i](0\le i &lt; n)$。</p>
<p>预处理的时间复杂度为：</p>
<ul>
<li>长度个数：$O(n)$</li>
<li>每个长度的区间个数：$O(n)$</li>
<li>求解每个区间花费：$O(1)$</li>
<li>总时间复杂度：$O(n^2)$</li>
</ul>
<p>预处理完之后，$f[i][j]$ 即为 $RMQ(i, j)$ 的值。</p>
<p>例如对于如下的数据：</p>
<table>
<thead>
<tr>
<th align="center">$i$</th>
<th align="center">0</th>
<th align="center">1</th>
<th align="center">2</th>
<th align="center">3</th>
<th align="center">4</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$A[i]$</td>
<td align="center">3</td>
<td align="center">2</td>
<td align="center">4</td>
<td align="center">1</td>
<td align="center">5</td>
</tr>
</tbody></table>
<p>其求解过程如下图：</p>
<img src="/2020/10/29/rmq/dp_draw.gif" class="">

<p>具体代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> inf</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dp</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, a</span>):</span></span><br><span class="line">        self.n = len(a)</span><br><span class="line">        self.a = a</span><br><span class="line">        self.f = [[inf <span class="keyword">for</span> _ <span class="keyword">in</span> range(self.n)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(self.n)]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preprocess</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># Initialize the number in the diagonal.</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.n):</span><br><span class="line">            self.f[i][i] = self.a[i]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Iterator the diagonals.</span></span><br><span class="line">        <span class="comment"># l means the index of the diagonal(start from 0).</span></span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> range(<span class="number">1</span>, self.n):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, self.n - l):</span><br><span class="line">                j = i + l</span><br><span class="line">                self.f[i][j] = min(self.f[i][j - <span class="number">1</span>], self.f[i + <span class="number">1</span>][j])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rmq</span>(<span class="params">self, i, j</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.f[i][j]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    a = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>]</span><br><span class="line">    dp = Dp(a)</span><br><span class="line">    dp.preprocess()</span><br><span class="line">    print(dp.rmq(<span class="number">1</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure>

<h1 id="分块"><a href="#分块" class="headerlink" title="分块"></a>分块</h1><p>还可以采用分块的方法，将数组划分为连续的 $O(n/b)$ 个大小为 $b$ 的块，预处理出每一块的最小值，预处理的时间复杂度为：</p>
<ul>
<li>块个数：$O(n/b)$</li>
<li>块大小：$O(b)$</li>
<li>总时间复杂度：$O(n)$</li>
</ul>
<p>计算 $RMQ(i, j)$ 时，其过程及时间复杂度为：</p>
<ul>
<li>找到 $i,j$ 所在块编号：$O(1)$</li>
<li>在 $i, j$ 所在的两块中枚举寻找最小值：$O(b)$</li>
<li>在 $i, j$ 之间的块间枚举寻找最小值：$O(n/b)$</li>
<li>总时间复杂度：$O(n/b+b)$，经求导计算得出 $b=\sqrt n$ 时取得最小值，即：$O(\sqrt n)$</li>
</ul>
<p>其时间复杂度记为：$&lt;O(n), O(\sqrt n)&gt;$。</p>
<p>例如对于如下数据：</p>
<table>
<thead>
<tr>
<th align="center">$i$</th>
<th align="center">0</th>
<th align="center">1</th>
<th align="center">2</th>
<th align="center">3</th>
<th align="center">4</th>
<th align="center">5</th>
<th align="center">6</th>
<th align="center">7</th>
<th align="center">8</th>
<th align="center">9</th>
<th align="center">10</th>
<th align="center">11</th>
<th align="center">12</th>
<th align="center">13</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$A[i]$</td>
<td align="center">3</td>
<td align="center">5</td>
<td align="center">4</td>
<td align="center">1</td>
<td align="center">2</td>
<td align="center">9</td>
<td align="center">7</td>
<td align="center">6</td>
<td align="center">5</td>
<td align="center">8</td>
<td align="center">2</td>
<td align="center">4</td>
<td align="center">7</td>
<td align="center">4</td>
</tr>
</tbody></table>
<p>其求解 $RMQ(1, 13)$ 过程如下图：</p>
<img src="/2020/10/29/rmq/block_draw.gif" class="">

<p>具体代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt, inf</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Block</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, a</span>):</span></span><br><span class="line">        self.n = len(a)</span><br><span class="line">        self.len_b = int(sqrt(self.n))</span><br><span class="line">        self.cnt_b = (self.n - <span class="number">1</span>) // self.len_b + <span class="number">1</span></span><br><span class="line">        self.a = a</span><br><span class="line">        self.f = [inf <span class="keyword">for</span> _ <span class="keyword">in</span> range(self.cnt_b)] </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preprocess</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># Find the minium in every blocks.</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.cnt_b):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i * self.len_b, i * self.len_b + self.len_b):</span><br><span class="line">                <span class="comment"># Maybe overflow.</span></span><br><span class="line">                <span class="keyword">if</span> j &gt;= self.n:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                self.f[i] = min(self.f[i], self.a[j])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rmq</span>(<span class="params">self, i, j</span>):</span></span><br><span class="line">        ans = inf</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Calculate the index of block containing i/j.</span></span><br><span class="line">        ith = i // self.len_b</span><br><span class="line">        jth = j // self.len_b</span><br><span class="line">        <span class="comment"># iterator within the block to find the minium. </span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ith == jth:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(i, j + <span class="number">1</span>):</span><br><span class="line">                ans = min(ans, self.a[k])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(i, ith * self.len_b + self.len_b):</span><br><span class="line">                ans = min(ans, self.a[k])</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(jth * self.len_b, j + <span class="number">1</span>):</span><br><span class="line">                ans = min(ans, self.a[k])</span><br><span class="line">            <span class="comment"># Iterator the blocks between i and j to find the minium.</span></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(ith + <span class="number">1</span>, jth):</span><br><span class="line">                ans = min(ans, self.f[k])</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    a = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">4</span>]</span><br><span class="line">    block = Block(a)</span><br><span class="line">    block.preprocess()</span><br><span class="line">    print(block.rmq(<span class="number">1</span>, <span class="number">13</span>))</span><br></pre></td></tr></table></figure>

<h1 id="稀疏表"><a href="#稀疏表" class="headerlink" title="稀疏表"></a>稀疏表</h1><p>对于上文的动态规划算法，对所有 $O(n^2)$ 个区间进行了预处理，可以通过减少预处理的区间个数（在保证依旧可以 $O(1)$ 查询的前提下）来进行优化，具体方法为：对于每一个可能的区间起点 $i(0\le i &lt; n)$ ，求出从 $i$ 开始的长度为 $2^0, 2^1, …, 2^k$ （直到不能再大为止）的区间的最小值（即求出所有长度为2的幂的区间），其时间复杂度为：</p>
<ul>
<li><p>可能的起点个数：$O(n)$</p>
</li>
<li><p>每个起点最多计算的区间个数：$O(log(n))$</p>
</li>
<li><p>求解每个区间最小值时的花费：$O(1)$</p>
</li>
<li><p>总时间复杂度：$O(nlog(n))$</p>
</li>
</ul>
<p>预处理的难点在于如何求解每个区间最小值来使得其花费为 $O(1)$。可以利用上文动态规划思想，具体算法为：依次求出长度为 $2^0, 2^1, …, 2^k$ 的所有区间的最小值，在求长度为 $2^l(0&lt;l\le k)$的区间: $[i, j] (j-i+1=2^l)$ 时，可利用两个长度为 $l-1$ 的区间 $ [i, i + 2^{l-1}-1] $ 和  $[i+2^{l-1}, j]$ 直接比较求出。为了节省状态空间，定义 $f[i][l]$ 为：起点为 $i$, 区间长度为 $2^l$ 的区间最小值，其状态转移方程为：<br>$$<br>f[i][l]=min(f[i][l-1], f[i+2^{l-1}][l-1])<br>$$<br>状态初始化为：$f[i][0]=a[i](0\le i&lt; n)$。</p>
<p>计算 $RMQ(i, j)$ 时，其过程及时间复杂度为：</p>
<ul>
<li><p>求出最大的 $k$ 使得 $2^k\le j-i+1$：$O(1)$</p>
</li>
<li><p>区间 $[i, j]$ 可分解为 $[i, i+2^k-1], [j-2^k+1, j]$ 的并集，取两区间最小值：$O(1)$</p>
</li>
<li><p>总时间复杂度：$O(1)$</p>
</li>
</ul>
<p>对于区间的分解，作如下解释：因为预处理过程中只求出了所有长度为2的幂的区间，所以分解的两个区间的长度都要是2的幂，故第一个区间从 $i$ 开始，长度为 $2^k$，第二个区间需要覆盖剩余区间，故以 $j$ 为结尾，向前延伸到长度为 $2^k$ 为止，由于 $2^{k+1}&gt;j-i+1$，故两区间必覆盖区间 $[i, j]$。</p>
<p>其时间复杂度记为：$&lt;O(nlog(n)), O(1)&gt;$。</p>
<p>例如对于如下数据：</p>
<table>
<thead>
<tr>
<th align="center">$i$</th>
<th align="center">0</th>
<th align="center">1</th>
<th align="center">2</th>
<th align="center">3</th>
<th align="center">4</th>
<th align="center">5</th>
<th align="center">6</th>
<th align="center">7</th>
<th align="center">8</th>
<th align="center">9</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$A[i]$</td>
<td align="center">2</td>
<td align="center">9</td>
<td align="center">7</td>
<td align="center">6</td>
<td align="center">5</td>
<td align="center">1</td>
<td align="center">8</td>
<td align="center">3</td>
<td align="center">4</td>
<td align="center">6</td>
</tr>
</tbody></table>
<p>其预处理过程如下图：</p>
<img src="/2020/10/29/rmq/st_draw.gif" class="">

<p>其求解 $RMQ(2, 8)$ 时，过程如下：</p>
<ul>
<li>求出 $k=log(8-2)=2$</li>
<li>将区间分解为：$[2, 2 + 2^2-1], [8-2^2+1, 8]$， 即：$[2,5],[5,8]$，其区间最小值为：$min(f[2][2], f[5][2])$</li>
</ul>
<p>具体代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> log </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">St</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, a</span>):</span></span><br><span class="line">        self.a = a</span><br><span class="line">        self.n = len(a)</span><br><span class="line">        self.f = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(self.n)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(self.n)]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preprocess</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.n):</span><br><span class="line">            self.f[i][<span class="number">0</span>] = self.a[i] </span><br><span class="line"></span><br><span class="line">        k = int(log(self.n) / log(<span class="number">2</span>))</span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> range(<span class="number">1</span>, k + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(self.n):</span><br><span class="line">                <span class="keyword">if</span> i + int(pow(<span class="number">2</span>, l)) - <span class="number">1</span> &gt;= self.n:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                self.f[i][l] = min(self.f[i][l - <span class="number">1</span>], self.f[i + int(pow(<span class="number">2</span>, l - <span class="number">1</span>))][l - <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rmq</span>(<span class="params">self, i, j</span>):</span></span><br><span class="line">        k = int(log(j - i + <span class="number">1</span>) / log(<span class="number">2</span>))</span><br><span class="line">        <span class="keyword">return</span> min(self.f[i][k], self.f[j - int(pow(<span class="number">2</span>, k)) + <span class="number">1</span>][k])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    a = [<span class="number">2</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br><span class="line">    st = St(a)</span><br><span class="line">    st.preprocess()</span><br><span class="line">    print(st.rmq(<span class="number">2</span>, <span class="number">8</span>))</span><br></pre></td></tr></table></figure>

<h1 id="算法组合"><a href="#算法组合" class="headerlink" title="算法组合"></a>算法组合</h1><p>至此，有了四种求解 $RMQ$ 的算法：</p>
<ul>
<li>不进行任何预处理：$&lt;O(1), O(n)&gt;$</li>
<li>预处理全部区间（动态规划）：$&lt;O(n^2), O(1)&gt;$</li>
<li>分块：$&lt;O(n), O(\sqrt n)&gt;$</li>
<li>预处理一部分区间（稀疏表）：$&lt;O(nlog(n)), O(1)&gt;$</li>
</ul>
<p>可以通过如下方式进行算法组合：</p>
<ul>
<li>将数组分成 $O(n/b)$ 个大小为 $b$ 的块</li>
<li>对于每一块求出最小值</li>
<li>以块为单位选择一种 $RMQ$ 算法</li>
<li>在每一块内部选择一种 $RMQ$ 算法</li>
<li>将两种 $RMQ$ 算法求出的结果进行比较求出最终结果</li>
</ul>
<p>关键点在于如何：</p>
<ul>
<li>选择合适的块大小 $b$</li>
<li>选择块间 $RMQ$ 算法</li>
<li>选择块内 $RMQ$ 算法</li>
</ul>
<p>假设选择时间复杂度为 $&lt;p_1(n), q_1(n)&gt;$ 的块间 $RMQ$ 算法，时间复杂度为 $&lt;p_2(n), q_2(n)&gt;$ 的块内 $RMQ$ 算法，</p>
<p>则预处理的时间复杂度为：</p>
<ul>
<li>计算出每一块内的最小值：$O(n)$</li>
<li>块间 $RMQ$ 算法：$p_1(n/b)$</li>
<li>在 $O(n/b)$ 块内进行 RMQ 算法：$O(n/b)p_2(b)$</li>
<li>总时间复杂度为：$O(n+p_1(n/b)+(n/b)p_2(b))$</li>
</ul>
<p>查询的时间复杂度为：</p>
<ul>
<li>块间查询：$q_1(n/b)$</li>
<li>块内查询：$q_2(b)$</li>
<li>总时间复杂度：$O(q_1(n/b)+q_2(b))$</li>
</ul>
<h2 id="组合1（稀疏表-无预处理）"><a href="#组合1（稀疏表-无预处理）" class="headerlink" title="组合1（稀疏表+无预处理）"></a>组合1（稀疏表+无预处理）</h2><p>块间采用稀疏表算法，块内不进行预处理，块大小为 $log(n)$，即：<br>$$<br>\begin{eqnarray*}<br>&amp;p_1&amp;(n)=nlog(n)\\<br>&amp;q_1&amp;(n)=1\\<br>&amp;p_2&amp;(n)=1\\<br>&amp;q_2&amp;(n)=n\\<br>&amp;b&amp;=log(n)<br>\end{eqnarray*}<br>$$<br>预处理的时间复杂度为：<br>$$<br>\begin{eqnarray*}<br>&amp;O&amp;(n+p_1(n/b)+(n/b)p_2(b))\\<br>=&amp;O&amp;(n+n/b\cdot log(n/b)+n/b)\\<br>=&amp;O&amp;(n+n/log(n)\cdot log(n/log(n))+(n/log(n)))\\<br>=&amp;O&amp;(n+n/log(n)\cdot log(n)+n)\\<br>=&amp;O&amp;(n)<br>\end{eqnarray*}<br>$$<br>查询的时间复杂度为：<br>$$<br>\begin{eqnarray*}<br>&amp;O&amp;(q_1(n/b)+q_2(b))\\<br>=&amp;O&amp;(1+log(n))\\<br>=&amp;O&amp;(log(n))<br>\end{eqnarray*}<br>$$<br>故其时间复杂度可记为：$&lt;O(n), O(log(n))&gt;$。</p>
<p>其代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt, log, inf</span><br><span class="line"><span class="keyword">from</span> st <span class="keyword">import</span> St</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Combine1</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, a</span>):</span></span><br><span class="line">        self.a = a</span><br><span class="line">        self.n = len(a)</span><br><span class="line">        self.len_b = max(<span class="number">1</span>, int(log(self.n)/log(<span class="number">2</span>)))</span><br><span class="line">        self.cnt_b = (self.n - <span class="number">1</span>) // self.len_b + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preprocess</span>(<span class="params">self</span>):</span></span><br><span class="line">        f = [inf <span class="keyword">for</span> _ <span class="keyword">in</span> range(self.cnt_b)] </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.cnt_b):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i * self.len_b, i * self.len_b + self.len_b):</span><br><span class="line">                <span class="keyword">if</span> j &gt;= self.n:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                f[i] = min(f[i], self.a[j])</span><br><span class="line"></span><br><span class="line">        self.st = St(f)</span><br><span class="line">        self.st.preprocess()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rmq</span>(<span class="params">self, i, j</span>):</span></span><br><span class="line">        ans = inf</span><br><span class="line">        ith = i // self.len_b </span><br><span class="line">        jth = j // self.len_b</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ith == jth:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(i, j + <span class="number">1</span>):</span><br><span class="line">                ans = min(ans, self.a[k])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(i, ith * self.len_b + self.len_b):</span><br><span class="line">                ans = min(ans, self.a[k])</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(jth * self.len_b, j + <span class="number">1</span>):</span><br><span class="line">                ans = min(ans, self.a[k])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ith + <span class="number">1</span> &lt;= jth - <span class="number">1</span>:</span><br><span class="line">            ans = min(ans, self.st.rmq(ith + <span class="number">1</span>, jth - <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>: </span><br><span class="line">    a = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">4</span>]</span><br><span class="line">    combine1 = Combine1(a)</span><br><span class="line">    combine1.preprocess()</span><br><span class="line">    print(combine1.rmq(<span class="number">1</span>, <span class="number">13</span>))</span><br></pre></td></tr></table></figure>





<h2 id="组合2（稀疏表-稀疏表）"><a href="#组合2（稀疏表-稀疏表）" class="headerlink" title="组合2（稀疏表+稀疏表）"></a>组合2（稀疏表+稀疏表）</h2><p>块间与块内均采用稀疏表，块大小为 $log(n)$，即：<br>$$<br>\begin{eqnarray*}<br>&amp;p_1&amp;(n)=nlog(n)\\<br>&amp;q_1&amp;(n)=1\\<br>&amp;p_2&amp;(n)=nlog(n)\\<br>&amp;q_2&amp;(n)=1\\<br>&amp;b&amp;=log(n)<br>\end{eqnarray*}<br>$$<br>预处理的时间复杂度为：<br>$$<br>\begin{eqnarray*}<br>&amp;O&amp;(n+p_1(n/b)+(n/b)p_2(b))\\<br>=&amp;O&amp;(n+n/b\cdot log(n/b)+n/b\cdot b\cdot log(b))\\<br>=&amp;O&amp;(n+n/log(n)\cdot log(n/log(n))+n\cdot log(log(n)))\\<br>=&amp;O&amp;(n+n+n\cdot log(log(n)))\\<br>=&amp;O&amp;(n\cdot log(log(n)))<br>\end{eqnarray*}<br>$$<br>查询的时间复杂度为：<br>$$<br>\begin{eqnarray*}<br>&amp;O&amp;(q_1(n/b)+q_2(b))\\<br>=&amp;O&amp;(1)<br>\end{eqnarray*}<br>$$<br>故其时间复杂度可记为：$&lt;O(n\cdot log(log(n))), O(1)&gt;$。</p>
<p>其代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt, log, inf</span><br><span class="line"><span class="keyword">from</span> st <span class="keyword">import</span> St</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Combine2</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, a</span>):</span></span><br><span class="line">        self.a = a</span><br><span class="line">        self.n = len(a)</span><br><span class="line">        self.len_b = max(<span class="number">1</span>, int(log(self.n)/log(<span class="number">2</span>)))</span><br><span class="line">        self.cnt_b = (self.n - <span class="number">1</span>) // self.len_b + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preprocess</span>(<span class="params">self</span>):</span></span><br><span class="line">        f = [inf <span class="keyword">for</span> _ <span class="keyword">in</span> range(self.cnt_b)] </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.cnt_b):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i * self.len_b, i * self.len_b + self.len_b):</span><br><span class="line">                <span class="keyword">if</span> j &gt;= self.n:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                f[i] = min(f[i], self.a[j])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># ST between blocks.</span></span><br><span class="line">        self.st = St(f)</span><br><span class="line">        self.st.preprocess()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># ST winth block.</span></span><br><span class="line">        self.sts = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.cnt_b):</span><br><span class="line">            tmp = self.a[i * self.len_b : min(self.n, i * self.len_b + self.len_b)]</span><br><span class="line">            self.sts.append(St(tmp))</span><br><span class="line">            self.sts[i].preprocess()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rmq</span>(<span class="params">self, i, j</span>):</span></span><br><span class="line">        ans = inf</span><br><span class="line">        ith = i // self.len_b </span><br><span class="line">        jth = j // self.len_b</span><br><span class="line"></span><br><span class="line">        i -= ith * self.len_b</span><br><span class="line">        j -= jth * self.len_b</span><br><span class="line">        <span class="keyword">if</span> ith == jth:</span><br><span class="line">            ans = min(ans, self.sts[ith].rmq(i, j))  </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ans = min(ans, self.sts[ith].rmq(i, self.len_b - <span class="number">1</span>))</span><br><span class="line">            ans = min(ans, self.sts[jth].rmq(<span class="number">0</span>, j))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ith + <span class="number">1</span> &lt;= jth - <span class="number">1</span>:</span><br><span class="line">            ans = min(ans, self.st.rmq(ith + <span class="number">1</span>, jth - <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>: </span><br><span class="line">    a = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">4</span>]</span><br><span class="line">    combine1 = Combine1(a)</span><br><span class="line">    combine1.preprocess()</span><br><span class="line">    print(combine1.rmq(<span class="number">1</span>, <span class="number">13</span>))</span><br></pre></td></tr></table></figure>



<h2 id="组合3（稀疏表-组合1）"><a href="#组合3（稀疏表-组合1）" class="headerlink" title="组合3（稀疏表+组合1）"></a>组合3（稀疏表+组合1）</h2><p>块间采用稀疏表算法，块内采用组合1算法，块大小为 $log(n)$，即：<br>$$<br>\begin{eqnarray*}<br>&amp;p_1&amp;(n)=nlog(n)\\<br>&amp;q_1&amp;(n)=1\\<br>&amp;p_2&amp;(n)=n\\<br>&amp;q_2&amp;(n)=log(n)\\<br>&amp;b&amp;=log(n)<br>\end{eqnarray*}<br>$$<br>预处理的时间复杂度为：<br>$$<br>\begin{eqnarray*}<br>&amp;O&amp;(n+p_1(n/b)+(n/b)p_2(b))\\<br>=&amp;O&amp;(n+n/b\cdot log(n/b)+n/b\cdot b)\\<br>=&amp;O&amp;(n+n/log(n)\cdot log(n/log(n))+n)\\<br>=&amp;O&amp;(n)<br>\end{eqnarray*}<br>$$<br>查询的时间复杂度为：<br>$$<br>\begin{eqnarray*}<br>&amp;O&amp;(q_1(n/b)+q_2(b))\\<br>=&amp;O&amp;(1+log(log(n)))\\<br>=&amp;O&amp;(log(log(n)))<br>\end{eqnarray*}<br>$$<br>故其时间复杂度可记为：$&lt;O(n), O(log(log(n)))&gt;$。</p>
<p>其代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt, log, inf</span><br><span class="line"><span class="keyword">from</span> st <span class="keyword">import</span> St</span><br><span class="line"><span class="keyword">from</span> combine1 <span class="keyword">import</span> Combine1</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Combine3</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, a</span>):</span></span><br><span class="line">        self.a = a</span><br><span class="line">        self.n = len(a)</span><br><span class="line">        self.len_b = max(<span class="number">1</span>, int(log(self.n)/log(<span class="number">2</span>)))</span><br><span class="line">        self.cnt_b = (self.n - <span class="number">1</span>) // self.len_b + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preprocess</span>(<span class="params">self</span>):</span></span><br><span class="line">        f = [inf <span class="keyword">for</span> _ <span class="keyword">in</span> range(self.cnt_b)] </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.cnt_b):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i * self.len_b, i * self.len_b + self.len_b):</span><br><span class="line">                <span class="keyword">if</span> j &gt;= self.n:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                f[i] = min(f[i], self.a[j])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># ST between blocks.</span></span><br><span class="line">        self.st = St(f)</span><br><span class="line">        self.st.preprocess()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># ST winth block.</span></span><br><span class="line">        self.combine1s = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.cnt_b):</span><br><span class="line">            tmp = self.a[i * self.len_b : min(self.n, i * self.len_b + self.len_b)]</span><br><span class="line">            self.combine1s.append(Combine1(tmp))</span><br><span class="line">            self.combine1s[i].preprocess()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rmq</span>(<span class="params">self, i, j</span>):</span></span><br><span class="line">        ans = inf</span><br><span class="line">        ith = i // self.len_b </span><br><span class="line">        jth = j // self.len_b</span><br><span class="line"></span><br><span class="line">        i -= ith * self.len_b</span><br><span class="line">        j -= jth * self.len_b</span><br><span class="line">        <span class="keyword">if</span> ith == jth:</span><br><span class="line">            ans = min(ans, self.combine1s[ith].rmq(i, j))  </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ans = min(ans, self.combine1s[ith].rmq(i, self.len_b - <span class="number">1</span>))</span><br><span class="line">            ans = min(ans, self.combine1s[jth].rmq(<span class="number">0</span>, j))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ith + <span class="number">1</span> &lt;= jth - <span class="number">1</span>:</span><br><span class="line">            ans = min(ans, self.st.rmq(ith + <span class="number">1</span>, jth - <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>: </span><br><span class="line">    a = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">4</span>]</span><br><span class="line">    combine1 = Combine1(a)</span><br><span class="line">    combine1.preprocess()</span><br><span class="line">    print(combine1.rmq(<span class="number">1</span>, <span class="number">13</span>))</span><br></pre></td></tr></table></figure>



<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>至此，共得出7种算法，如下：</p>
<ul>
<li>不进行任何预处理：$&lt;O(1), O(n)&gt;$</li>
<li>预处理全部区间（动态规划）：$&lt;O(n^2), O(1)&gt;$</li>
<li>分块：$&lt;O(n), O(\sqrt n)&gt;$</li>
<li>预处理一部分区间（稀疏表）：$&lt;O(nlog(n)), O(1)&gt;$</li>
<li>组合1：$&lt;O(n), O(log(n))&gt;$</li>
<li>组合2：$&lt;O(n\cdot log(log(n))), O(1)&gt;$</li>
<li>组合3：$&lt;O(n), O(log(log(n)))&gt;$</li>
</ul>
<p>另外，稀疏表再此和组合2组合，可以继续减少预处理的时间复杂度为 $O(n\cdot log(log(log(n)))$，查询时间复杂度不变；稀疏表再次和组合3组合，可以继续减少查询的时间复杂度为 $O(log(log(log(n)))$，预处理时间复杂度不变。组合可以一直进行下去。</p>
<p><strong><a href="https://github.com/Ackeraa/DataStructure/tree/master/RMQ">下载</a>代码.</strong></p>
<p><strong>进入<a href="/2021/01/29/rmq2/" title="Part Two">Part Two</a></strong>.</p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>python</tag>
      </tags>
  </entry>
</search>
