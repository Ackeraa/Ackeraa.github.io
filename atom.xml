<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Acker&#39;s Blog</title>
  
  <subtitle>Algorithms</subtitle>
  <link href="https://acker.fun/atom.xml" rel="self"/>
  
  <link href="https://acker.fun/"/>
  <updated>2022-09-20T11:52:36.915Z</updated>
  <id>https://acker.fun/</id>
  
  <author>
    <name>Acker</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Do Not F**king Call Me</title>
    <link href="https://acker.fun/2022/09/19/dnfcm/"/>
    <id>https://acker.fun/2022/09/19/dnfcm/</id>
    <published>2022-09-19T08:29:05.000Z</published>
    <updated>2022-09-20T11:52:36.915Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在程序设计中，我特别喜欢一个叫作 “控制反转”(Inversion of Control)的设计原则，我的理解是：你不要联系我(Don’t Call Me)，我会在合适的时候主动联系你(I Will Call</summary>
        
      
    
    
    
    <category term="有趣的事" scheme="https://acker.fun/categories/%E6%9C%89%E8%B6%A3%E7%9A%84%E4%BA%8B/"/>
    
    
    <category term="脚本" scheme="https://acker.fun/tags/%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>Suffix Array &amp; Suffix Tree</title>
    <link href="https://acker.fun/2022/07/28/suffixtrees/"/>
    <id>https://acker.fun/2022/07/28/suffixtrees/</id>
    <published>2022-07-28T14:03:54.000Z</published>
    <updated>2022-10-29T10:50:47.594Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1&gt;问题描述&lt;/h1&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;给定总长度为 $m$ 的 $k$ 个文本串：$T_1, T_2, …, T_k$ 和长度为 $n$ 的模式串 $P$， 找出所有前缀为 $P$ 的文本串。&lt;/li&gt;
&lt;li&gt;给定长度为 $m$ 的文本串</summary>
        
      
    
    
    
    <category term="数据结构" scheme="https://acker.fun/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://acker.fun/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="python" scheme="https://acker.fun/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Aho-Corasick Automata</title>
    <link href="https://acker.fun/2022/07/04/ac-automata/"/>
    <id>https://acker.fun/2022/07/04/ac-automata/</id>
    <published>2022-07-04T07:00:03.000Z</published>
    <updated>2022-10-29T11:40:14.705Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1&gt;问题描述&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个字符串 $T$，找出 $k$ 个非空字符串 $P_1, P_2, …, P_k$ 在 $T$</summary>
        
      
    
    
    
    <category term="数据结构" scheme="https://acker.fun/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://acker.fun/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="python" scheme="https://acker.fun/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Range Minimum Queries(Part Two)</title>
    <link href="https://acker.fun/2021/01/29/rmq2/"/>
    <id>https://acker.fun/2021/01/29/rmq2/</id>
    <published>2021-01-29T03:50:39.000Z</published>
    <updated>2022-10-29T04:23:28.150Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1&gt;问题回顾&lt;/h1&gt;
&lt;p&gt;在 &lt;a href=&quot;/2020/10/29/rmq/&quot; title=&quot;Part One&quot;&gt;Part One&lt;/a&gt;中，基于分块算法，建立了这样一个算法框架：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;块间采用时间复杂度为</summary>
        
      
    
    
    
    <category term="数据结构" scheme="https://acker.fun/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://acker.fun/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="python" scheme="https://acker.fun/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Range Minimum Queries(Part One)</title>
    <link href="https://acker.fun/2020/10/29/rmq/"/>
    <id>https://acker.fun/2020/10/29/rmq/</id>
    <published>2020-10-29T08:44:12.000Z</published>
    <updated>2022-10-29T11:53:09.290Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1&gt;问题描述&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;给定长度为 $n$ 的数组A，以及两个下标 $i,j(i\le j) $, 求出 $ A[i], A[i + 1], … , A[j]$ 的最小值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最简单的方法是直接枚举</summary>
        
      
    
    
    
    <category term="数据结构" scheme="https://acker.fun/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://acker.fun/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="python" scheme="https://acker.fun/tags/python/"/>
    
  </entry>
  
</feed>
